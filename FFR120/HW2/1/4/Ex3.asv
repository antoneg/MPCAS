
clear all;

gridSize = 128;
tweak = 0.2;

SET1 = load('set1.mat');
SET2 = load('set2.mat');
SET1_fire = SET1.plotData(:,1);
SET2_fire = SET2.plotData(:,1);
% 
% denseLike = load('denseLike.mat');
% SET1_denseLike = denseLike.SET1_recreatedClusters;
% SET2_denseLike = denseLike.SET2_recreatedClusters;
p1 = SET1.p;
f1 = SET1.f;

p2 = SET2.p;
f2 = SET2.f;

%A rank-frequency plot with the fire data and the linear fit used to find
%the exponent tau;
burnedTrees = SET2_fire;

PlotLogLog(burnedTrees, gridSize, 'r.');
hold on
tau = PlotLinFit(burnedTrees, gridSize, tweak, 'b-');
legend('Simulation', ['Linear fit with \tau = ' num2str(tau,3)])
title(['Fire sim & linear fit (for RFS <', num2str(tweak), ')'])
tau

%A rank-frequency plot comparing the fire data and the
%synthetic power law data.
figure(2)
PlotLogLog(burnedTrees, gridSize, 'r.');
hold on
GenerateAndPlotSynthetic(tau, burnedTrees)

% burnedTrees = data.burnedTrees;
% cCDF = data.cCDF;
% 
% figure(200)
% xmin = burnedTrees(end);
% loglog(burnedTrees, cCDF, 'r.')
% hold on

% PlotLinFit(burnedTrees, tweak)
% % linFitY = cCDF;
% linFitX = [];
% linFitY = [];
% for i = 1:size(burnedTrees,1)
%     if burnedTrees(i) < 0.3
%         linFitX(end+1) = burnedTrees(i);
%         linFitY(end+1) = cCDF(i);
%     end
% end
% 
% 
% p = polyfit(log(linFitX),log(linFitY),1);
% z = polyval(p,log(linFitX));
% 
% loglog(linFitX,exp(z), 'b')
% 
% xlim([xmin 1])
% xlabel('Relative fire size')
% ylabel('cCDF')
% % 
% % hold on % Hold on for next
% % 
% % y1 = log(exp(z(1)));
% % y2 = log(exp(z(end)));
% % 
% % x1 = log(burnedTrees(1));
% % x2 = log(burnedTrees(end));
% % 
% % yDiff = y2-y1;
% % xDiff = x2 - x1;
% % 
% % slope = yDiff/xDiff;
% % 
% % tau = 1-slope;
% % tau
% % 
% % nrOfDataPoints = size(burnedTrees,1);
% % 
% % syntheticData = [];
% % 
% % tauExp = -1/(tau-1);
% % ymin = 0.695;
% % for i = 1:nrOfDataPoints
% %     ri = rand;
% %     syntheticData(i) = (1/128^2)*(1-ri)^(-(1/(tau-1)));
% % end
% % 
% % syntheticData = sort(syntheticData, 'descend'); %This is X_i
% % xAxis = syntheticData;
% % yAxis = xAxis;
% % for i = 1:nrOfDataPoints
% %     yAxis(i) = i/nrOfDataPoints;
% % end
% % 
% % loglog(xAxis,yAxis,'g');
